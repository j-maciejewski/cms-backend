type PublicUser {
  id: String!
  firstName: String!
  lastName: String!
  avatar: String
  isAnonymous: Boolean!
}

type User {
  id: String!
  email: String!
  firstName: String!
  lastName: String!
  avatar: String
  role: RoleEnum!
  isSuspended: Boolean!
  isAnonymous: Boolean!

  createdAt: String!

  articles: [Article!]
}

input UsersGridInput {
  limit: Int
  page: Int
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
}

input UpdateUserInput {
  email: String
  firstName: String
  lastName: String
  avatar: String
  role: RoleEnum
  isSuspended: Boolean
  isAnonymous: Boolean
}

type UsersListResponse {
  total: Int!
  rows: [User!]!
}

type Query {
  users(grid: UsersGridInput): UsersListResponse!
  user(id: String!): User
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(id: String!, updateUserInput: UpdateUserInput!): User!
  deleteUser(id: String!): User
}
